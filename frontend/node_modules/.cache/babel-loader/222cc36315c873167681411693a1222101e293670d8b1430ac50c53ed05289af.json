{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 사용자 관련 API\nexport const userAPI = {\n  // 사용자 등록\n  register: userData => api.post('/api/users/', userData),\n  // 사용자 목록 조회\n  getUsers: (skip = 0, limit = 100) => api.get(`/api/users/?skip=${skip}&limit=${limit}`),\n  // 특정 사용자 조회\n  getUser: userId => api.get(`/api/users/${userId}`),\n  // 사용자 정보 업데이트\n  updateUser: (userId, userData) => api.put(`/api/users/${userId}`, userData),\n  // 사용자 삭제\n  deleteUser: userId => api.delete(`/api/users/${userId}`),\n  // 사용자 선호도 생성/업데이트\n  createPreference: (userId, preferenceData) => api.post(`/api/users/${userId}/preferences`, preferenceData),\n  // 사용자 선호도 조회\n  getPreference: userId => api.get(`/api/users/${userId}/preferences`)\n};\n\n// 향수 관련 API\nexport const perfumeAPI = {\n  // 향수 생성\n  createPerfume: perfumeData => api.post('/api/perfumes/', perfumeData),\n  // 향수 목록 조회\n  getPerfumes: (params = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n      if (params[key]) queryParams.append(key, params[key]);\n    });\n    return api.get(`/api/perfumes/?${queryParams}`);\n  },\n  // 특정 향수 조회\n  getPerfume: perfumeId => api.get(`/api/perfumes/${perfumeId}`),\n  // 향수 정보 업데이트\n  updatePerfume: (perfumeId, perfumeData) => api.put(`/api/perfumes/${perfumeId}`, perfumeData),\n  // 향수 삭제\n  deletePerfume: perfumeId => api.delete(`/api/perfumes/${perfumeId}`),\n  // 향수 제조법 추가\n  createRecipe: (perfumeId, recipeData) => api.post(`/api/perfumes/${perfumeId}/recipes`, recipeData),\n  // 향수 제조법 조회\n  getRecipes: perfumeId => api.get(`/api/perfumes/${perfumeId}/recipes`),\n  // 향수 카테고리 목록\n  getCategories: () => api.get('/api/perfumes/categories/list')\n};\n\n// 추천 관련 API\nexport const recommendationAPI = {\n  // 향수 추천\n  getRecommendation: requestData => api.post('/api/recommendations/', requestData),\n  // 사용자별 향수 추천\n  getUserRecommendation: userId => api.post(`/api/recommendations/user/${userId}`),\n  // 사용자 추천 기록\n  getRecommendationHistory: userId => api.get(`/api/recommendations/user/${userId}/history`),\n  // 추천 피드백 제출\n  submitFeedback: (recommendationId, feedback) => api.post(`/api/recommendations/feedback/${recommendationId}`, feedback),\n  // 카테고리별 향수 조회\n  getPerfumesByCategory: category => api.get(`/api/recommendations/categories/${category}`),\n  // 인기 향수 조회\n  getPopularPerfumes: () => api.get('/api/recommendations/popular')\n};\n\n// 헬스 체크\nexport const healthCheck = () => api.get('/health');\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","userAPI","register","userData","post","getUsers","skip","limit","get","getUser","userId","updateUser","put","deleteUser","delete","createPreference","preferenceData","getPreference","perfumeAPI","createPerfume","perfumeData","getPerfumes","params","queryParams","URLSearchParams","Object","keys","forEach","key","append","getPerfume","perfumeId","updatePerfume","deletePerfume","createRecipe","recipeData","getRecipes","getCategories","recommendationAPI","getRecommendation","requestData","getUserRecommendation","getRecommendationHistory","submitFeedback","recommendationId","feedback","getPerfumesByCategory","category","getPopularPerfumes","healthCheck"],"sources":["C:/Users/super/Desktop/DS/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 사용자 관련 API\r\nexport const userAPI = {\r\n  // 사용자 등록\r\n  register: (userData) => api.post('/api/users/', userData),\r\n  \r\n  // 사용자 목록 조회\r\n  getUsers: (skip = 0, limit = 100) => \r\n    api.get(`/api/users/?skip=${skip}&limit=${limit}`),\r\n  \r\n  // 특정 사용자 조회\r\n  getUser: (userId) => api.get(`/api/users/${userId}`),\r\n  \r\n  // 사용자 정보 업데이트\r\n  updateUser: (userId, userData) => \r\n    api.put(`/api/users/${userId}`, userData),\r\n  \r\n  // 사용자 삭제\r\n  deleteUser: (userId) => api.delete(`/api/users/${userId}`),\r\n  \r\n  // 사용자 선호도 생성/업데이트\r\n  createPreference: (userId, preferenceData) => \r\n    api.post(`/api/users/${userId}/preferences`, preferenceData),\r\n  \r\n  // 사용자 선호도 조회\r\n  getPreference: (userId) => \r\n    api.get(`/api/users/${userId}/preferences`),\r\n};\r\n\r\n// 향수 관련 API\r\nexport const perfumeAPI = {\r\n  // 향수 생성\r\n  createPerfume: (perfumeData) => \r\n    api.post('/api/perfumes/', perfumeData),\r\n  \r\n  // 향수 목록 조회\r\n  getPerfumes: (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.keys(params).forEach(key => {\r\n      if (params[key]) queryParams.append(key, params[key]);\r\n    });\r\n    return api.get(`/api/perfumes/?${queryParams}`);\r\n  },\r\n  \r\n  // 특정 향수 조회\r\n  getPerfume: (perfumeId) => api.get(`/api/perfumes/${perfumeId}`),\r\n  \r\n  // 향수 정보 업데이트\r\n  updatePerfume: (perfumeId, perfumeData) => \r\n    api.put(`/api/perfumes/${perfumeId}`, perfumeData),\r\n  \r\n  // 향수 삭제\r\n  deletePerfume: (perfumeId) => api.delete(`/api/perfumes/${perfumeId}`),\r\n  \r\n  // 향수 제조법 추가\r\n  createRecipe: (perfumeId, recipeData) => \r\n    api.post(`/api/perfumes/${perfumeId}/recipes`, recipeData),\r\n  \r\n  // 향수 제조법 조회\r\n  getRecipes: (perfumeId) => \r\n    api.get(`/api/perfumes/${perfumeId}/recipes`),\r\n  \r\n  // 향수 카테고리 목록\r\n  getCategories: () => api.get('/api/perfumes/categories/list'),\r\n};\r\n\r\n// 추천 관련 API\r\nexport const recommendationAPI = {\r\n  // 향수 추천\r\n  getRecommendation: (requestData) => \r\n    api.post('/api/recommendations/', requestData),\r\n  \r\n  // 사용자별 향수 추천\r\n  getUserRecommendation: (userId) => \r\n    api.post(`/api/recommendations/user/${userId}`),\r\n  \r\n  // 사용자 추천 기록\r\n  getRecommendationHistory: (userId) => \r\n    api.get(`/api/recommendations/user/${userId}/history`),\r\n  \r\n  // 추천 피드백 제출\r\n  submitFeedback: (recommendationId, feedback) => \r\n    api.post(`/api/recommendations/feedback/${recommendationId}`, feedback),\r\n  \r\n  // 카테고리별 향수 조회\r\n  getPerfumesByCategory: (category) => \r\n    api.get(`/api/recommendations/categories/${category}`),\r\n  \r\n  // 인기 향수 조회\r\n  getPopularPerfumes: () => \r\n    api.get('/api/recommendations/popular'),\r\n};\r\n\r\n// 헬스 체크\r\nexport const healthCheck = () => api.get('/health');\r\n\r\nexport default api; \r\n "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAGC,QAAQ,IAAKN,GAAG,CAACO,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;EAEzD;EACAE,QAAQ,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAC9BV,GAAG,CAACW,GAAG,CAAC,oBAAoBF,IAAI,UAAUC,KAAK,EAAE,CAAC;EAEpD;EACAE,OAAO,EAAGC,MAAM,IAAKb,GAAG,CAACW,GAAG,CAAC,cAAcE,MAAM,EAAE,CAAC;EAEpD;EACAC,UAAU,EAAEA,CAACD,MAAM,EAAEP,QAAQ,KAC3BN,GAAG,CAACe,GAAG,CAAC,cAAcF,MAAM,EAAE,EAAEP,QAAQ,CAAC;EAE3C;EACAU,UAAU,EAAGH,MAAM,IAAKb,GAAG,CAACiB,MAAM,CAAC,cAAcJ,MAAM,EAAE,CAAC;EAE1D;EACAK,gBAAgB,EAAEA,CAACL,MAAM,EAAEM,cAAc,KACvCnB,GAAG,CAACO,IAAI,CAAC,cAAcM,MAAM,cAAc,EAAEM,cAAc,CAAC;EAE9D;EACAC,aAAa,EAAGP,MAAM,IACpBb,GAAG,CAACW,GAAG,CAAC,cAAcE,MAAM,cAAc;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMQ,UAAU,GAAG;EACxB;EACAC,aAAa,EAAGC,WAAW,IACzBvB,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAEgB,WAAW,CAAC;EAEzC;EACAC,WAAW,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC5B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzCC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAG,IAAI;MACjC,IAAIN,MAAM,CAACM,GAAG,CAAC,EAAEL,WAAW,CAACM,MAAM,CAACD,GAAG,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC;IACF,OAAO/B,GAAG,CAACW,GAAG,CAAC,kBAAkBe,WAAW,EAAE,CAAC;EACjD,CAAC;EAED;EACAO,UAAU,EAAGC,SAAS,IAAKlC,GAAG,CAACW,GAAG,CAAC,iBAAiBuB,SAAS,EAAE,CAAC;EAEhE;EACAC,aAAa,EAAEA,CAACD,SAAS,EAAEX,WAAW,KACpCvB,GAAG,CAACe,GAAG,CAAC,iBAAiBmB,SAAS,EAAE,EAAEX,WAAW,CAAC;EAEpD;EACAa,aAAa,EAAGF,SAAS,IAAKlC,GAAG,CAACiB,MAAM,CAAC,iBAAiBiB,SAAS,EAAE,CAAC;EAEtE;EACAG,YAAY,EAAEA,CAACH,SAAS,EAAEI,UAAU,KAClCtC,GAAG,CAACO,IAAI,CAAC,iBAAiB2B,SAAS,UAAU,EAAEI,UAAU,CAAC;EAE5D;EACAC,UAAU,EAAGL,SAAS,IACpBlC,GAAG,CAACW,GAAG,CAAC,iBAAiBuB,SAAS,UAAU,CAAC;EAE/C;EACAM,aAAa,EAAEA,CAAA,KAAMxC,GAAG,CAACW,GAAG,CAAC,+BAA+B;AAC9D,CAAC;;AAED;AACA,OAAO,MAAM8B,iBAAiB,GAAG;EAC/B;EACAC,iBAAiB,EAAGC,WAAW,IAC7B3C,GAAG,CAACO,IAAI,CAAC,uBAAuB,EAAEoC,WAAW,CAAC;EAEhD;EACAC,qBAAqB,EAAG/B,MAAM,IAC5Bb,GAAG,CAACO,IAAI,CAAC,6BAA6BM,MAAM,EAAE,CAAC;EAEjD;EACAgC,wBAAwB,EAAGhC,MAAM,IAC/Bb,GAAG,CAACW,GAAG,CAAC,6BAA6BE,MAAM,UAAU,CAAC;EAExD;EACAiC,cAAc,EAAEA,CAACC,gBAAgB,EAAEC,QAAQ,KACzChD,GAAG,CAACO,IAAI,CAAC,iCAAiCwC,gBAAgB,EAAE,EAAEC,QAAQ,CAAC;EAEzE;EACAC,qBAAqB,EAAGC,QAAQ,IAC9BlD,GAAG,CAACW,GAAG,CAAC,mCAAmCuC,QAAQ,EAAE,CAAC;EAExD;EACAC,kBAAkB,EAAEA,CAAA,KAClBnD,GAAG,CAACW,GAAG,CAAC,8BAA8B;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMyC,WAAW,GAAGA,CAAA,KAAMpD,GAAG,CAACW,GAAG,CAAC,SAAS,CAAC;AAEnD,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}